{"version":3,"sources":["AsyncStorage.native.js"],"names":["RCTAsyncStorage","Error","checkValidInput","usedKey","value","isValuePassed","arguments","length","console","warn","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","multiGet","errors","result","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","i","request","requestKeys","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","Array","isArray","e","out","message"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n * @jsdoc\n */\n\n'use strict';\n\nimport RCTAsyncStorage from './RCTAsyncStorage';\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Run \\`react-native link @react-native-community/async-storage\\` in the project root.\n\n  • Rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app.\n\n  • If this happens while testing with Jest, check out docs how to integrate AsyncStorage with it: https://react-native-community.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-async-storage/issues \n`);\n}\n\ntype ReadOnlyArrayString = $ReadOnlyArray<string>;\n\ntype MultiGetCallbackFunction = (\n  errors: ?$ReadOnlyArray<Error>,\n  result: ?$ReadOnlyArray<ReadOnlyArrayString>,\n) => void;\n\ntype MultiRequest = {|\n  keys: $ReadOnlyArray<string>,\n  callback: ?MultiGetCallbackFunction,\n  keyIndex: number,\n  resolve: ?(result?: Promise<?$ReadOnlyArray<ReadOnlyArrayString>>) => void,\n  reject: ?(error?: any) => void,\n|};\n\nfunction checkValidInput(usedKey: string, value: any) {\n  const isValuePassed = arguments.length > 1;\n\n  if (typeof usedKey !== 'string') {\n    console.warn(\n      `[AsyncStorage] Using ${typeof usedKey} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${usedKey}\\n`,\n    );\n  }\n\n  if (isValuePassed && typeof value !== 'string') {\n    if (value == null) {\n      throw new Error(\n        `[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .remove method instead.\\nPassed value: ${value}\\nPassed key: ${usedKey}\\n`,\n      );\n    } else {\n      console.warn(\n        `[AsyncStorage] The value for key \"${usedKey}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${usedKey}\\n`,\n      );\n    }\n  }\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See http://reactnative.dev/docs/asyncstorage.html\n */\nconst AsyncStorage = {\n  _getRequests: ([]: Array<MultiRequest>),\n  _getKeys: ([]: Array<string>),\n  _immediate: (null: ?number),\n\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#getitem\n   */\n  getItem: function(\n    key: string,\n    callback?: ?(error: ?Error, result: string | null) => void,\n  ): Promise<string | null> {\n    return new Promise((resolve, reject) => {\n      checkValidInput(key);\n      RCTAsyncStorage.multiGet([key], function(errors, result) {\n        // Unpack result to get value from [[key,value]]\n        const value = result && result[0] && result[0][1] ? result[0][1] : null;\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0], value);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(value);\n        }\n      });\n    });\n  },\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#setitem\n   */\n  setItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      checkValidInput(key, value);\n      RCTAsyncStorage.multiSet([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#removeitem\n   */\n  removeItem: function(\n    key: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      checkValidInput(key);\n      RCTAsyncStorage.multiRemove([key], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * **NOTE:** This is not supported by all native implementations.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#mergeitem\n   */\n  mergeItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      checkValidInput(key, value);\n      RCTAsyncStorage.multiMerge([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#clear\n   */\n  clear: function(callback?: ?(error: ?Error) => void): Promise<null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.clear(function(error) {\n        const err = convertError(error);\n        callback && callback(err);\n        if (err) {\n          reject(err);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#getallkeys\n   */\n  getAllKeys: function(\n    callback?: ?(error: ?Error, keys: ?ReadOnlyArrayString) => void,\n  ): Promise<ReadOnlyArrayString> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.getAllKeys(function(error, keys) {\n        const err = convertError(error);\n        callback && callback(err, keys);\n        if (err) {\n          reject(err);\n        } else {\n          resolve(keys);\n        }\n      });\n    });\n  },\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#flushgetrequests\n   * */\n  flushGetRequests: function(): void {\n    const getRequests = this._getRequests;\n    const getKeys = this._getKeys;\n\n    this._getRequests = [];\n    this._getKeys = [];\n\n    RCTAsyncStorage.multiGet(getKeys, function(errors, result) {\n      // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n      // it's much, much faster in practice for the data sets we deal with (we avoid\n      // allocating result pair arrays). This was heavily benchmarked.\n      //\n      // Is there a way to avoid using the map but fix the bug in this breaking test?\n      // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n      const map = {};\n      result &&\n        result.forEach(([key, value]) => {\n          map[key] = value;\n          return value;\n        });\n      const reqLength = getRequests.length;\n      for (let i = 0; i < reqLength; i++) {\n        const request = getRequests[i];\n        const requestKeys = request.keys;\n        const requestResult = requestKeys.map(key => [key, map[key]]);\n        request.callback && request.callback(null, requestResult);\n        request.resolve && request.resolve(requestResult);\n      }\n    });\n  },\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#multiget\n   */\n  multiGet: function(\n    keys: Array<string>,\n    callback?: ?MultiGetCallbackFunction,\n  ): Promise<?$ReadOnlyArray<ReadOnlyArrayString>> {\n    if (!this._immediate) {\n      this._immediate = setImmediate(() => {\n        this._immediate = null;\n        this.flushGetRequests();\n      });\n    }\n\n    const getRequest: MultiRequest = {\n      keys: keys,\n      callback: callback,\n      // do we need this?\n      keyIndex: this._getKeys.length,\n      resolve: null,\n      reject: null,\n    };\n\n    const promiseResult = new Promise((resolve, reject) => {\n      getRequest.resolve = resolve;\n      getRequest.reject = reject;\n    });\n\n    this._getRequests.push(getRequest);\n    // avoid fetching duplicates\n    keys.forEach(key => {\n      if (this._getKeys.indexOf(key) === -1) {\n        this._getKeys.push(key);\n      }\n    });\n\n    return promiseResult;\n  },\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#multiset\n   */\n  multiSet: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?$ReadOnlyArray<?Error>) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      keyValuePairs.forEach(([key, value]) => {\n        checkValidInput(key, value);\n      });\n\n      RCTAsyncStorage.multiSet(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#multiremove\n   */\n  multiRemove: function(\n    keys: Array<string>,\n    callback?: ?(errors: ?$ReadOnlyArray<?Error>) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      keys.forEach(key => checkValidInput(key));\n\n      RCTAsyncStorage.multiRemove(keys, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * **NOTE**: This is not supported by all native implementations.\n   *\n   * See http://reactnative.dev/docs/asyncstorage.html#multimerge\n   */\n  multiMerge: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?$ReadOnlyArray<?Error>) => void,\n  ): Promise<null> {\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n};\n\n// Not all native implementations support merge.\nif (!RCTAsyncStorage.multiMerge) {\n  delete AsyncStorage.mergeItem;\n  delete AsyncStorage.multiMerge;\n}\n\nfunction convertErrors(errs): ?$ReadOnlyArray<?Error> {\n  if (!errs || (Array.isArray(errs) && errs.length === 0)) {\n    return null;\n  }\n  return (Array.isArray(errs) ? errs : [errs]).map(e => convertError(e));\n}\n\nfunction convertError(error): ?Error {\n  if (!error) {\n    return null;\n  }\n  const out = new Error(error.message);\n  // $FlowFixMe: adding custom properties to error.\n  out.key = error.key;\n  return out;\n}\n\nexport default AsyncStorage;\n"]}